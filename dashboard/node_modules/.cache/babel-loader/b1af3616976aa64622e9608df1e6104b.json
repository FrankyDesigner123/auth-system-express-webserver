{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load user\n\nexport const loadUser = () => async dispatch => {\n  // check if token is in localStorage\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('api/users/profile/');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = ({\n  fullName,\n  email,\n  password,\n  role\n}) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    fullName,\n    email,\n    password,\n    role\n  });\n\n  try {\n    const res = await axios.post('/api/users/register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors; //check if errors\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login user\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors; //check if errors\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/frankytse/ReactNative/Fullstack-React-Native-Expressjs/auth-system/server/dashboard/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","fullName","email","password","role","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL,\n\tUSER_LOADED,\n\tAUTH_ERROR,\n\tLOGIN_SUCCESS,\n\tLOGIN_FAIL,\n\tLOGOUT,\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n\t// check if token is in localStorage\n\tif (localStorage.token) {\n\t\tsetAuthToken(localStorage.token);\n\t}\n\n\ttry {\n\t\tconst res = await axios.get('api/users/profile/');\n\n\t\tdispatch({\n\t\t\ttype: USER_LOADED,\n\t\t\tpayload: res.data,\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR,\n\t\t});\n\t}\n};\n\n// Register user\nexport const register = ({ fullName, email, password, role }) => async (\n\tdispatch\n) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t};\n\tconst body = JSON.stringify({ fullName, email, password, role });\n\n\ttry {\n\t\tconst res = await axios.post('/api/users/register', body, config);\n\n\t\tdispatch({\n\t\t\ttype: REGISTER_SUCCESS,\n\t\t\tpayload: res.data,\n\t\t});\n\n\t\tdispatch(loadUser());\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\t//check if errors\n\t\tif (errors) {\n\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\t\tdispatch({\n\t\t\ttype: REGISTER_FAIL,\n\t\t});\n\t}\n};\n\n// Login user\nexport const login = ({ email, password }) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t};\n\tconst body = JSON.stringify({ email, password });\n\n\ttry {\n\t\tconst res = await axios.post('/api/users/login', body, config);\n\n\t\tdispatch({\n\t\t\ttype: LOGIN_SUCCESS,\n\t\t\tpayload: res.data,\n\t\t});\n\t\tdispatch(loadUser());\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\t//check if errors\n\t\tif (errors) {\n\t\t\terrors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\t\tdispatch({\n\t\t\ttype: LOGIN_FAIL,\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}